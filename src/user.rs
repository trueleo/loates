use std::pin::Pin;

use futures::Future;

use crate::{data::RuntimeDataStore, error::Error, UserResult};

/// The `User` trait defines the fundamental component of this library.
/// A `User` represents a state coupled with an asynchronous function that can be executed asynchronously.
/// This is the primary trait that any user of this library will implement for their test cases.
/// This can be thought of as a virtual user such that, The executor will only run the async function defined by the user only once at a time.
/// This allows user state to be mutated by the execution but the downside is that enough users need to be generated by executor to generate sufficient load in certain scenarios.
///
///
/// ### User Trait Bounds
///
/// - `User` is `Send`, which allows `&mut self` to be used across thread boundaries.
///   For more information, see the [Rust documentation on the Send trait](https://doc.rust-lang.org/std/marker/trait.Send.html).
///
/// ### Note
/// A concrete implementation of the `User` trait can capture arguments and reference data from higher layers,
/// such as the [RuntimeDataStore](crate::data::RuntimeDataStore) defined in the scenario or in its executor.
#[async_trait::async_trait]
pub trait User: Send {
    async fn call(&mut self) -> UserResult;
}

#[async_trait::async_trait]
impl<F, Fut> User for F
where
    F: FnMut() -> Fut + Send,
    Fut: Future<Output = UserResult> + Send,
{
    async fn call(&mut self) -> UserResult {
        self().await
    }
}

/// Builds a user instance asynchronously.
/// The type implementing this should also implement Sync as this is shared across runtime executors.
/// Runtime executors given the type and configuration can request more user in middle of execution.  
///
/// ### Generic types and their constraints
///
/// - `Args` must implement the [Extractor] trait and is `Send`.
/// - `U` must be a User type and must have a lifetime bound of `'a`.
///
pub trait AsyncUserBuilder: Sync {
    type Output: User;
    /// Build a new instance of user
    fn build<'a>(
        &self,
        store: &'a RuntimeDataStore,
    ) -> impl std::future::Future<Output = Result<Self::Output, Error>> + std::marker::Send;
}

impl<F, U> AsyncUserBuilder for F
where
    F: Fn(&RuntimeDataStore) -> Pin<Box<dyn Future<Output = Result<U, Error>> + Send + '_>> + Sync,
    U: User,
{
    type Output = U;
    async fn build<'a>(&self, store: &'a RuntimeDataStore) -> Result<Self::Output, Error> {
        self(store).await
    }
}
